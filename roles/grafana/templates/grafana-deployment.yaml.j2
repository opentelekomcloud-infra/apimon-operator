apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  annotations: 
    config_revision : "{{ config_revision }}"
  labels:
    app.kubernetes.io/name: "grafana"
    app.kubernetes.io/component: "dashboard"
    app.kubernetes.io/instance: "{{ instance }}"
    app.kubernetes.io/managed-by: "operator"
  name: "{{ name }}"
spec:
  replicas: {{ count }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "grafana"
      app.kubernetes.io/component: "dashboard"
      app.kubernetes.io/instance: "{{ instance }}"
  strategy: {}
  template:
    metadata:
      annotations: 
        config_revision : "{{ config_revision }}"
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: "grafana"
        app.kubernetes.io/component: "dashboard"
        app.kubernetes.io/instance: "{{ instance }}"
    spec:
      hostAliases:
{% if ldap_server_ip is defined and ldap_server_ip|length and 
      ldap_server_name is defined and ldap_server_name|length %}
      - ip: "{{ ldap_server_ip }}"
        hostnames:
        - "{{ ldap_server_name }}"
{% endif %}
      - ip: "127.0.0.1"
        hostnames:
        - "{{ fqdn }}"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/instance"
                  operator: In
                  values:
                  - "{{ instance }}"
              topologyKey: kubernetes.io/hostname
      containers:
      - image: "{{ renderer_image }}" 
        name: "{{ name }}-renderer"
        ports:
        - containerPort: 8081
{% if renderer_resources is defined and renderer_resources|length %}
        resources:
{% for key, value in renderer_resources.items() %}
          {{ key }}:
{% for key2, value2 in value.items() %}
            {{ key2 }}: {{ value2 }}
{% endfor %}
{% endfor %}
{% endif %}
      - image: "{{ image }}"
        name: "{{ name }}"
        ports:
        - containerPort: 3000
{% if resources is defined and resources|length %}
        resources:
{% for key, value in resources.items() %}
          {{ key }}:
{% for key2, value2 in value.items() %}
            {{ key2 }}: {{ value2 }}
{% endfor %}
{% endfor %}
{% endif %}
        readinessProbe:
          httpGet:
            path: /login
            scheme: HTTP
            port: 3000
        livenessProbe:
          httpGet:
            path: /healthz
            scheme: HTTP
            port: 3000
        env:
          - name: GF_RENDERING_SERVER_URL
            value: http://localhost:8081/render
          - name: GF_RENDERING_CALLBACK_URL
            value: http://{{ fqdn }}:3000
          - name: GF_INSTALL_PLUGINS
            value: "{{ plugins }}"
{% if grafana_secret_exists is defined and grafana_secret_exists|length %}
        envFrom:
        - secretRef:
            name: {{ secret }}
{% endif %}
        volumeMounts:
{% if grafana_config_exists is defined and grafana_config_exists|length %}
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini
{% endif %}
{% if grafana_config_ldap_exists is defined and grafana_config_ldap_exists|length %}
        - name: grafana-config-ldap
          mountPath: /etc/grafana/ldap.toml
          subPath: ldap.toml
{% endif %}
{% if grafana_config_ldap_ca_cert_exists is defined and grafana_config_ldap_ca_cert_exists|length %}
        - name: grafana-config-ldap-ca-cert
          mountPath: /etc/grafana/ldap-root-ca-cert.crt
          subPath: ldap-root-ca-cert.crt
{% endif %}
      volumes:
{% if grafana_config_exists is defined and grafana_config_exists|length %}
      - configMap:
          name: "{{ config }}"
        name: grafana-config
{% endif %}
{% if grafana_config_ldap_exists is defined and grafana_config_ldap_exists|length %}
      - configMap:
          name: "{{ config_ldap }}"
        name: grafana-config-ldap
{% endif %}
{% if grafana_config_ldap_ca_cert_exists is defined and grafana_config_ldap_ca_cert_exists|length %}
      - configMap:
          name: "{{ config_ldap_ca_cert }}"
        name: grafana-config-ldap-ca-cert
{% endif %}
status: {}
